# Generated by Django 4.2.23 on 2025-08-08 15:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='LeagueM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo', models.CharField(blank=True, max_length=200)),
                ('additional_info', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SeasonM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=10)),
                ('season_years', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(max_length=255)),
                ('extra_info', models.CharField(blank=True, max_length=1000, null=True)),
                ('promotion_number', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('playoffs_number', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('relegation_number', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='data.leaguem')),
            ],
        ),
        migrations.CreateModel(
            name='TeamM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo', models.CharField(blank=True, max_length=200)),
                ('founded', models.IntegerField(blank=True, null=True)),
                ('stadium', models.CharField(blank=True, max_length=100)),
                ('website', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='StandingM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standings', to='data.leaguem')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standings', to='data.seasonm')),
            ],
        ),
        migrations.CreateModel(
            name='RoundM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='data.leaguem')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='data.seasonm')),
            ],
        ),
        migrations.CreateModel(
            name='MatchM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('away_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('LIVE', 'Live'), ('FINISHED', 'Finished'), ('SCHEDULED', 'Scheduled'), ('POSTPONED', 'Postponed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=10)),
                ('minute', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('venue', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='data.teamm')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='data.teamm')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='data.leaguem')),
                ('round', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='data.roundm')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='data.seasonm')),
            ],
        ),
        migrations.CreateModel(
            name='EventM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('GOAL', 'Goal'), ('YELLOW_CARD', 'Yellow Card'), ('RED_CARD', 'Red Card'), ('SUBSTITUTION', 'Substitution'), ('PENALTY', 'Penalty'), ('OWN_GOAL', 'Own Goal')], max_length=15)),
                ('minute', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('player_id', models.CharField(blank=True, max_length=20)),
                ('player_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='data.matchm')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='data.teamm')),
            ],
        ),
        migrations.CreateModel(
            name='StandingEntryM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('played', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('won', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('drawn', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('lost', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('goals_for', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('goals_against', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('goal_difference', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('standing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table', to='data.standingm')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.teamm')),
            ],
            options={
                'unique_together': {('standing', 'team')},
            },
        ),
    ]
